{
    "pipes": [],
    "interfaces": [
        {
            "name": "Member",
            "id": "interface-Member-1f1600288564f871aedd6145bfccf8d7",
            "file": "src/app/store/model.ts",
            "type": "interface",
            "sourceCode": "export interface Sprint {\r\n    id: string\r\n    name: string\r\n    toDo: Task[]\r\n    progress: Task[]\r\n    blocked: Task[]\r\n    done: Task[]\r\n}\r\n\r\nexport interface Task {\r\n    name: string\r\n    from: Date\r\n    to: Date\r\n    description: string\r\n    steps: Step[]\r\n    member: Member[]\r\n\r\n}\r\n\r\nexport interface Step {\r\n    done: boolean,\r\n    name: string\r\n}\r\n\r\nexport interface Member {\r\n    name: string,\r\n    id: string\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Sprint",
            "id": "interface-Sprint-1f1600288564f871aedd6145bfccf8d7",
            "file": "src/app/store/model.ts",
            "type": "interface",
            "sourceCode": "export interface Sprint {\r\n    id: string\r\n    name: string\r\n    toDo: Task[]\r\n    progress: Task[]\r\n    blocked: Task[]\r\n    done: Task[]\r\n}\r\n\r\nexport interface Task {\r\n    name: string\r\n    from: Date\r\n    to: Date\r\n    description: string\r\n    steps: Step[]\r\n    member: Member[]\r\n\r\n}\r\n\r\nexport interface Step {\r\n    done: boolean,\r\n    name: string\r\n}\r\n\r\nexport interface Member {\r\n    name: string,\r\n    id: string\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "blocked",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "done",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "progress",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "toDo",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Step",
            "id": "interface-Step-1f1600288564f871aedd6145bfccf8d7",
            "file": "src/app/store/model.ts",
            "type": "interface",
            "sourceCode": "export interface Sprint {\r\n    id: string\r\n    name: string\r\n    toDo: Task[]\r\n    progress: Task[]\r\n    blocked: Task[]\r\n    done: Task[]\r\n}\r\n\r\nexport interface Task {\r\n    name: string\r\n    from: Date\r\n    to: Date\r\n    description: string\r\n    steps: Step[]\r\n    member: Member[]\r\n\r\n}\r\n\r\nexport interface Step {\r\n    done: boolean,\r\n    name: string\r\n}\r\n\r\nexport interface Member {\r\n    name: string,\r\n    id: string\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "done",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Task",
            "id": "interface-Task-1f1600288564f871aedd6145bfccf8d7",
            "file": "src/app/store/model.ts",
            "type": "interface",
            "sourceCode": "export interface Sprint {\r\n    id: string\r\n    name: string\r\n    toDo: Task[]\r\n    progress: Task[]\r\n    blocked: Task[]\r\n    done: Task[]\r\n}\r\n\r\nexport interface Task {\r\n    name: string\r\n    from: Date\r\n    to: Date\r\n    description: string\r\n    steps: Step[]\r\n    member: Member[]\r\n\r\n}\r\n\r\nexport interface Step {\r\n    done: boolean,\r\n    name: string\r\n}\r\n\r\nexport interface Member {\r\n    name: string,\r\n    id: string\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "from",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "member",
                    "type": "Member[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "steps",
                    "type": "Step[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "to",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-bf0604e15ddac9661f327fee2cfde56e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Personal Kanban App'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Personal Kanban App';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-member></app-member>"
        },
        {
            "name": "MemberComponent",
            "id": "component-MemberComponent-024bef7d6ef48bfa0a47222b707995c2",
            "file": "src/app/components/member/member.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-member",
            "styleUrls": [
                "./member.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./member.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "members",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "members$",
                    "defaultValue": "this.store.select(selectMembers)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "newMember",
                    "defaultValue": "new FormControl('')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "store",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addMember",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "member",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "member",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { createMember, removeMember, updateMember } from 'src/app/store/member/member.actions';\nimport { selectMembers } from 'src/app/store/member/member.reducer';\n\n@Component({\n  selector: 'app-member',\n  templateUrl: './member.component.html',\n  styleUrls: ['./member.component.scss']\n})\nexport class MemberComponent implements OnInit {\n\n\n  newMember = new FormControl('');\n  constructor(public store: Store) { }\n\n\n  members$ = this.store.select(selectMembers);\n  members: any;\n\n  ngOnInit(): void {\n    this.members$.subscribe(data => {\n      this.members = data.map(member => ({ ...member, editing: false }))\n    })\n  }\n\n  save(member) {\n    member.editing = false\n    this.store.dispatch(updateMember({ name: member.name, id: member.id }));\n  }\n\n  remove(member) {\n    member.editing = false;\n    this.store.dispatch(removeMember({ id: member.id }))\n\n  }\n\n  addMember() {\n    if (this.newMember.value?.trim().length > 0) {\n      this.store.dispatch(createMember({ name: this.newMember.value }))\n      this.newMember.reset();\n    }\n    else return\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".member {\r\n    &__container {\r\n        height: 48rem;\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    &__header {\r\n        height: 8%;\r\n        background-color: rgb(8, 8, 8);\r\n        display: flex;\r\n        color: #f2f2f2;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-size: 2rem;\r\n        position: relative;\r\n        mat-icon {\r\n            position: absolute;\r\n            top: 30%;\r\n            right: 1%;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n\r\n    &__list {\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: 75%;\r\n        overflow: auto;\r\n        gap: 1rem;\r\n        padding: 2px;\r\n\r\n        &__item {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            padding: 0 1rem;\r\n            font-size: 1.2rem;\r\n            border: 1px solid rgba(128, 128, 128, 0.192);\r\n            box-shadow: 3px 5px #88888834;\r\n\r\n            &__buttons {\r\n                mat-icon {\r\n                    cursor: pointer;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    &__add {\r\n        padding: 1rem;\r\n        display: flex;\r\n        gap: 2rem;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n}\r\n",
                    "styleUrl": "./member.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"member__container\">\n    <div class=\"member__header\">\n        members\n        <mat-icon matTooltip='exit'>close</mat-icon>\n    </div>\n\n    <div class=\"member__list\">\n        <div class=\"member__list__item\" *ngFor='let member of members'>\n            <div *ngIf='!member.editing'> {{member.name}} </div>\n            <mat-form-field *ngIf='member.editing' appearance=\"legacy\">\n                <input matInput [(ngModel)]='member.name'>\n            </mat-form-field>\n\n            <div class='member__list__item__buttons'>\n                <mat-icon matTooltip='edit member' *ngIf='!member.editing' (click)='member.editing=true'>edit</mat-icon>\n                <mat-icon matTooltip='save member' *ngIf='member.editing' (click)='save(member)'>save</mat-icon>\n                <mat-icon matTooltip='remove member' (click)='remove(member)'>delete</mat-icon>\n\n            </div>\n        </div>\n    </div>\n\n    <div class=\"member__add\">\n        <mat-form-field appearance=\"legacy\">\n            <mat-label>Crete New member</mat-label>\n            <input matInput placeholder=\"new Spring\" [formControl]='newMember'>\n        </mat-form-field>\n\n        <button mat-mini-fab color=\"primary\" (click)='addMember()'>\n            <mat-icon>add</mat-icon>\n        </button>\n\n    </div>\n\n\n\n</div>"
        },
        {
            "name": "SprintComponent",
            "id": "component-SprintComponent-c2b9114fb3f9a2e67c8cd363559fccc1",
            "file": "src/app/components/sprint/sprint.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sprint",
            "styleUrls": [
                "./sprint.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sprint.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "newSprint",
                    "defaultValue": "new FormControl('')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "sprints",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "sprints$",
                    "defaultValue": "this.store.select(selectSprints)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "store",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addSprint",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "sprint",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "sprint",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "sprint",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "sprint",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { createSprint, removeSprint, updateSprint } from 'src/app/store/sprint/sprint.actions';\nimport { selectSprints } from 'src/app/store/sprint/sprint.reducer';\n\n@Component({\n  selector: 'app-sprint',\n  templateUrl: './sprint.component.html',\n  styleUrls: ['./sprint.component.scss']\n})\nexport class SprintComponent implements OnInit {\n\n\n  newSprint = new FormControl('');\n  constructor(public store: Store) { }\n\n\n  sprints$ = this.store.select(selectSprints);\n  sprints: any;\n\n  ngOnInit(): void {\n    this.sprints$.subscribe(data => {\n      this.sprints = data.map(sprint => ({ ...sprint, editing: false }))\n    })\n  }\n\n  save(sprint) {\n    sprint.editing = false\n    this.store.dispatch(updateSprint({ name: sprint.name, id: sprint.id }));\n  }\n\n  remove(sprint) {\n    sprint.editing = false;\n    this.store.dispatch(removeSprint({ id: sprint.id }))\n\n  }\n\n  addSprint() {\n    if (this.newSprint.value?.trim().length > 0) {\n      this.store.dispatch(createSprint({ name: this.newSprint.value }))\n      this.newSprint.reset();\n    }\n    else return\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sprint {\r\n    &__container {\r\n        height: 48rem;\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    &__header {\r\n        height: 8%;\r\n        background-color: rgb(8, 8, 8);\r\n        display: flex;\r\n        color: #f2f2f2;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-size: 2rem;\r\n        position: relative;\r\n        mat-icon {\r\n            position: absolute;\r\n            top: 30%;\r\n            right: 1%;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n\r\n    &__list {\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: 75%;\r\n        overflow: auto;\r\n        gap: 1rem;\r\n        padding: 2px;\r\n\r\n        &__item {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            padding: 0 1rem;\r\n            font-size: 1.2rem;\r\n            border: 1px solid rgba(128, 128, 128, 0.192);\r\n            box-shadow: 3px 5px #88888834;\r\n\r\n            &__buttons {\r\n                mat-icon {\r\n                    cursor: pointer;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    &__add {\r\n        padding: 1rem;\r\n        display: flex;\r\n        gap: 2rem;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n}\r\n",
                    "styleUrl": "./sprint.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"sprint__container\">\n    <div class=\"sprint__header\">\n        Sprints\n        <mat-icon matTooltip='exit'>close</mat-icon>\n    </div>\n\n    <div class=\"sprint__list\">\n        <div class=\"sprint__list__item\" *ngFor='let sprint of sprints'>\n            <div *ngIf='!sprint.editing'> {{sprint.name}} </div>\n            <mat-form-field *ngIf='sprint.editing' appearance=\"legacy\">\n                <input matInput [(ngModel)]='sprint.name'>\n            </mat-form-field>\n\n            <div class='sprint__list__item__buttons'>\n                <mat-icon matTooltip='edit sprint' *ngIf='!sprint.editing' (click)='sprint.editing=true'>edit</mat-icon>\n                <mat-icon matTooltip='save sprint' *ngIf='sprint.editing' (click)='save(sprint)'>save</mat-icon>\n                <mat-icon matTooltip='remove sprint' (click)='remove(sprint)'>delete</mat-icon>\n\n            </div>\n        </div>\n    </div>\n\n    <div class=\"sprint__add\">\n        <mat-form-field appearance=\"legacy\">\n            <mat-label>Crete New Sprint</mat-label>\n            <input matInput placeholder=\"new Spring\" [formControl]='newSprint'>\n        </mat-form-field>\n\n        <button mat-mini-fab color=\"primary\" (click)='addSprint()'>\n            <mat-icon>add</mat-icon>\n        </button>\n\n    </div>\n\n\n\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "MemberComponent"
                        },
                        {
                            "name": "SprintComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "createMember",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/member/member.actions.ts",
                "type": "",
                "defaultValue": "createAction(MemberActionTypes.create, props<{ name: string }>())"
            },
            {
                "name": "createSprint",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/sprint/sprint.actions.ts",
                "type": "",
                "defaultValue": "createAction(sprintActionTypes.create, props<{ name: string }>())"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/member/member.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/sprint/sprint.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/member/member.reducer.ts",
                "type": "Member[]",
                "defaultValue": "[]"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/sprint/sprint.reducer.ts",
                "type": "Sprint[]",
                "defaultValue": "[{\r\n    id: '3434',\r\n    name: 'Default',\r\n    toDo: [],\r\n    progress: [],\r\n    blocked: [],\r\n    done: []\r\n}]"
            },
            {
                "name": "MemberReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/member/member.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialState,\r\n    on(createMember, onCreateMember),\r\n    on(updateMember, onUpdateMember),\r\n    on(removeMember, onRemoveMember)\r\n\r\n)"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/jest-config/__mocks__/globalMocks.ts",
                "type": "",
                "defaultValue": "() => {\n    let storage = {};\n    return {\n      getItem: key => (key in storage ? storage[key] : null),\n      setItem: (key, value) => (storage[key] = value || ''),\n      removeItem: key => delete storage[key],\n      clear: () => (storage = {}),\n    };\n  }"
            },
            {
                "name": "onCreateMember",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/member/member.reducer.ts",
                "type": "",
                "defaultValue": "(state, { name }) => {\r\n    const newState = [...state];\r\n    newState.push({\r\n        id: '' + new Date().getTime(),\r\n        name: name,\r\n    });\r\n    return newState;\r\n}"
            },
            {
                "name": "onCreateSprint",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/sprint/sprint.reducer.ts",
                "type": "",
                "defaultValue": "(state, { name }) => {\r\n    const newState = [...state];\r\n    newState.push({\r\n        id: '' + new Date().getTime(),\r\n        name: name,\r\n        toDo: [],\r\n        progress: [],\r\n        blocked: [],\r\n        done: []\r\n    });\r\n    return newState;\r\n}"
            },
            {
                "name": "onRemoveMember",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/member/member.reducer.ts",
                "type": "",
                "defaultValue": "(state, { id }) => {\r\n    return state.filter(member => member.id !== id)\r\n}"
            },
            {
                "name": "onRemoveSprint",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/sprint/sprint.reducer.ts",
                "type": "",
                "defaultValue": "(state, { id }) => {\r\n    return state.filter(sprint => sprint.id !== id)\r\n}"
            },
            {
                "name": "onUpdateMember",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/member/member.reducer.ts",
                "type": "",
                "defaultValue": "(state, { name, id }) => {\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const sprint = newState.filter(s => s.id === id)[0];\r\n    sprint.name = name;\r\n    return newState;\r\n}"
            },
            {
                "name": "onUpdateSprint",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/sprint/sprint.reducer.ts",
                "type": "",
                "defaultValue": "(state, { name, id }) => {\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const sprint = newState.filter(s => s.id === id)[0];\r\n    sprint.name = name;\r\n    return newState;\r\n}"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers.ts",
                "type": "object",
                "defaultValue": "{\r\n    sprints: SprintReducer,\r\n    members: MemberReducer\r\n}"
            },
            {
                "name": "removeMember",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/member/member.actions.ts",
                "type": "",
                "defaultValue": "createAction(MemberActionTypes.remove, props<{ id: string }>())"
            },
            {
                "name": "removeSprint",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/sprint/sprint.actions.ts",
                "type": "",
                "defaultValue": "createAction(sprintActionTypes.remove, props<{ id: string }>())"
            },
            {
                "name": "selectMembers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/member/member.reducer.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<ReadonlyArray<Member>>('members')"
            },
            {
                "name": "selectSprints",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/sprint/sprint.reducer.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<ReadonlyArray<Sprint>>('sprints')"
            },
            {
                "name": "SprintReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/sprint/sprint.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialState,\r\n    on(createSprint, onCreateSprint),\r\n    on(updateSprint, onUpdateSprint),\r\n    on(removeSprint, onRemoveSprint)\r\n\r\n)"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/member/member.stories.ts",
                "type": "Story<MemberComponent>",
                "defaultValue": "args => ({\r\n    component: MemberComponent,\r\n    props: {\r\n        ...args,\r\n    },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/sprint/sprint.stories.ts",
                "type": "Story<SprintComponent>",
                "defaultValue": "args => ({\r\n    component: SprintComponent,\r\n    props: {\r\n        ...args,\r\n    },\r\n})"
            },
            {
                "name": "updateMember",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/member/member.actions.ts",
                "type": "",
                "defaultValue": "createAction(MemberActionTypes.update, props<{ name: string, id: string }>())"
            },
            {
                "name": "updateSprint",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/sprint/sprint.actions.ts",
                "type": "",
                "defaultValue": "createAction(sprintActionTypes.update, props<{ name: string, id: string }>())"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "MemberActionTypes",
                "childs": [
                    {
                        "name": "create",
                        "value": "[Member] Create"
                    },
                    {
                        "name": "update",
                        "value": "[Member] Update"
                    },
                    {
                        "name": "remove",
                        "value": "[Member] remove"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/member/member.actions.ts"
            },
            {
                "name": "sprintActionTypes",
                "childs": [
                    {
                        "name": "create",
                        "value": "[Sprint] Create"
                    },
                    {
                        "name": "update",
                        "value": "[Sprint] Update"
                    },
                    {
                        "name": "remove",
                        "value": "[Sprint] remove"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/sprint/sprint.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/store/member/member.actions.ts": [
                {
                    "name": "createMember",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/member/member.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(MemberActionTypes.create, props<{ name: string }>())"
                },
                {
                    "name": "removeMember",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/member/member.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(MemberActionTypes.remove, props<{ id: string }>())"
                },
                {
                    "name": "updateMember",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/member/member.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(MemberActionTypes.update, props<{ name: string, id: string }>())"
                }
            ],
            "src/app/store/sprint/sprint.actions.ts": [
                {
                    "name": "createSprint",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/sprint/sprint.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(sprintActionTypes.create, props<{ name: string }>())"
                },
                {
                    "name": "removeSprint",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/sprint/sprint.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(sprintActionTypes.remove, props<{ id: string }>())"
                },
                {
                    "name": "updateSprint",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/sprint/sprint.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(sprintActionTypes.update, props<{ name: string, id: string }>())"
                }
            ],
            "src/app/components/member/member.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/member/member.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/member/member.stories.ts",
                    "type": "Story<MemberComponent>",
                    "defaultValue": "args => ({\r\n    component: MemberComponent,\r\n    props: {\r\n        ...args,\r\n    },\r\n})"
                }
            ],
            "src/app/components/sprint/sprint.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/sprint/sprint.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/sprint/sprint.stories.ts",
                    "type": "Story<SprintComponent>",
                    "defaultValue": "args => ({\r\n    component: SprintComponent,\r\n    props: {\r\n        ...args,\r\n    },\r\n})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/app/store/member/member.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/member/member.reducer.ts",
                    "type": "Member[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "MemberReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/member/member.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialState,\r\n    on(createMember, onCreateMember),\r\n    on(updateMember, onUpdateMember),\r\n    on(removeMember, onRemoveMember)\r\n\r\n)"
                },
                {
                    "name": "onCreateMember",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/member/member.reducer.ts",
                    "type": "",
                    "defaultValue": "(state, { name }) => {\r\n    const newState = [...state];\r\n    newState.push({\r\n        id: '' + new Date().getTime(),\r\n        name: name,\r\n    });\r\n    return newState;\r\n}"
                },
                {
                    "name": "onRemoveMember",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/member/member.reducer.ts",
                    "type": "",
                    "defaultValue": "(state, { id }) => {\r\n    return state.filter(member => member.id !== id)\r\n}"
                },
                {
                    "name": "onUpdateMember",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/member/member.reducer.ts",
                    "type": "",
                    "defaultValue": "(state, { name, id }) => {\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const sprint = newState.filter(s => s.id === id)[0];\r\n    sprint.name = name;\r\n    return newState;\r\n}"
                },
                {
                    "name": "selectMembers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/member/member.reducer.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ReadonlyArray<Member>>('members')"
                }
            ],
            "src/app/store/sprint/sprint.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/sprint/sprint.reducer.ts",
                    "type": "Sprint[]",
                    "defaultValue": "[{\r\n    id: '3434',\r\n    name: 'Default',\r\n    toDo: [],\r\n    progress: [],\r\n    blocked: [],\r\n    done: []\r\n}]"
                },
                {
                    "name": "onCreateSprint",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/sprint/sprint.reducer.ts",
                    "type": "",
                    "defaultValue": "(state, { name }) => {\r\n    const newState = [...state];\r\n    newState.push({\r\n        id: '' + new Date().getTime(),\r\n        name: name,\r\n        toDo: [],\r\n        progress: [],\r\n        blocked: [],\r\n        done: []\r\n    });\r\n    return newState;\r\n}"
                },
                {
                    "name": "onRemoveSprint",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/sprint/sprint.reducer.ts",
                    "type": "",
                    "defaultValue": "(state, { id }) => {\r\n    return state.filter(sprint => sprint.id !== id)\r\n}"
                },
                {
                    "name": "onUpdateSprint",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/sprint/sprint.reducer.ts",
                    "type": "",
                    "defaultValue": "(state, { name, id }) => {\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const sprint = newState.filter(s => s.id === id)[0];\r\n    sprint.name = name;\r\n    return newState;\r\n}"
                },
                {
                    "name": "selectSprints",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/sprint/sprint.reducer.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ReadonlyArray<Sprint>>('sprints')"
                },
                {
                    "name": "SprintReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/sprint/sprint.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialState,\r\n    on(createSprint, onCreateSprint),\r\n    on(updateSprint, onUpdateSprint),\r\n    on(removeSprint, onRemoveSprint)\r\n\r\n)"
                }
            ],
            "src/jest-config/__mocks__/globalMocks.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/jest-config/__mocks__/globalMocks.ts",
                    "type": "",
                    "defaultValue": "() => {\n    let storage = {};\n    return {\n      getItem: key => (key in storage ? storage[key] : null),\n      setItem: (key, value) => (storage[key] = value || ''),\n      removeItem: key => delete storage[key],\n      clear: () => (storage = {}),\n    };\n  }"
                }
            ],
            "src/app/store/reducers.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    sprints: SprintReducer,\r\n    members: MemberReducer\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/store/member/member.actions.ts": [
                {
                    "name": "MemberActionTypes",
                    "childs": [
                        {
                            "name": "create",
                            "value": "[Member] Create"
                        },
                        {
                            "name": "update",
                            "value": "[Member] Update"
                        },
                        {
                            "name": "remove",
                            "value": "[Member] remove"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/member/member.actions.ts"
                }
            ],
            "src/app/store/sprint/sprint.actions.ts": [
                {
                    "name": "sprintActionTypes",
                    "childs": [
                        {
                            "name": "create",
                            "value": "[Sprint] Create"
                        },
                        {
                            "name": "update",
                            "value": "[Sprint] Update"
                        },
                        {
                            "name": "remove",
                            "value": "[Sprint] remove"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/sprint/sprint.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/member/member.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MemberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/member/member.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/member/member.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sprint/sprint.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SprintComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sprint/sprint.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sprint/sprint.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/member/member.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createMember",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/member/member.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeMember",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/member/member.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateMember",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/member/member.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/member/member.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MemberReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/member/member.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onCreateMember",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/member/member.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onRemoveMember",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/member/member.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onUpdateMember",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/member/member.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMembers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Member",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Sprint",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Step",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/sprint/sprint.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createSprint",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/sprint/sprint.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeSprint",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/sprint/sprint.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateSprint",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/sprint/sprint.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/sprint/sprint.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onCreateSprint",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/sprint/sprint.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onRemoveSprint",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/sprint/sprint.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onUpdateSprint",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/sprint/sprint.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSprints",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/sprint/sprint.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SprintReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/jest-config/__mocks__/globalMocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}